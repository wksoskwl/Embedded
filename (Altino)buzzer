#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#define N2 1250
#define N4 (N2/2)
#define N4N8 (N4+(N4/2))
#define N8 (N4/2)
#define N8N16 (N8+(N8/2))
#define N16 (N8/2)

enum{
	DO = 17,
	RE = 43,
	MI = 66,
	FA = 77,
	SOL = 97,
	LA = 114,
	SI = 129,
	DDO = 137,
	EOS = 255
};

volatile int state = 0;
int tone = 0;

int song[] = {
	MI, SOL, SOL, MI, SOL, SOL, LA, LA, LA, LA, LA,
	SOL, SOL, SOL, SOL, FA, FA, FA, FA, MI, MI, MI, MI, MI,
	MI, SOL, SOL, SOL, MI, SOL, SOL, LA, LA, MI, MI, SOL,
	FA, FA, FA, FA, MI, MI, MI, MI, RE, RE, SOL, SOL, DO,
	EOS
};

//박자 배열
int time[] = {
	N8, N8, N4, N8, N8, N4, N8, N8, N8, N8, N4N8,
	N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N4N8,
	N8, N8, N8, N8, N8, N8, N4, N8N16, N16, N8, N8, N4N8,
	N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N8, N4N8
};

ISR(TIMER0_OVF_vect){
	TCNT0 = song[tone];
	if(state == 0){
		PORTB |= (0x01 << 4);
		state = 1;
	}
	else{
		PORTB &= ~(0x01 << 4);
		state = 0;
	}
}

int main(void){
	DDRB |= 0x10;
	
	TCCR0 = 0x03;
	TIMSK = 0x01;
	TCNT0 = song[tone];
	sei();
	
    while (1) 
    {
		tone = 0;
		if((~PINB & 0x01) == 1){
			do{
				for(int i=0; i<time[tone] - 1;i++)	_delay_ms(1);
				TCNT0 = 0;
				_delay_ms(1);
				tone++;
			}while(song[tone] != EOS);
		}
		else{
			TCNT0 = 0;
			PORTB &=	(0x01 << 4);
		}
	}
	return 0;
}
